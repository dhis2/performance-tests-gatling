# file is based on
# https://github.com/dhis2/d2-cluster-docker-compose/blob/master/cluster/config/nginx.conf
worker_processes 1;

events {
  worker_connections 1024;
}

http {
  # Rate limiting for 2 second delay calculation:
  # rate=30r/m means 30 requests per minute
  # 60 seconds รท 30 requests = 2 seconds between requests
  # This creates a 2 second delay between each request
  limit_req_zone $remote_addr zone=delay_zone:10m rate=30r/m;

  upstream web {
    server web:8080 max_fails=3 fail_timeout=60s;
  }

  gzip on;
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # logging for requests to /api/{version}/tracker
  # https://nginx.org/en/docs/http/ngx_http_core_module.html#variables
  log_format tracker_log
	'$time_iso8601|$request_method|$uri|$query_string|$status|$request_completion|$request_id|$http_referer|$http_user_agent|$bytes_sent|$body_bytes_sent|$connection|$connection_requests|$connection_time|$request_time|$upstream_connect_time|$upstream_header_time|$upstream_response_time|$cookie_JSESSIONID';

  map $uri $is_tracker {
    ~^/api(/\d+)?/tracker 1;
    default 0;
  }

  # uncomment if you only want to log GET requests
  # nginx requires some ugly workarounds to get multiple conditions to work
  # map "$request_method:$is_tracker" $is_tracker_get {
  #   "GET:1" 1;
  #   default 0;
  # }

  server {
    listen 18080;
    port_in_redirect off;

    root /data/apps;

    client_max_body_size 10m;

    # Redirect required to prevent 403 error on / access
    rewrite ^/$ $scheme://$http_host/dhis-web-dashboard redirect;

    access_log /var/log/nginx/tracker_access.log tracker_log if=$is_tracker;

    location / {
      include mime.types;
      try_files $uri $uri/ $uri/index.html @web;
    }

    location @web {
      # Apply rate limiting with 2 second delay for every request
      # burst=1: allow 1 request in burst
      # delay=1: delay the 1st request in burst (effectively all requests)
      limit_req zone=delay_zone burst=1 delay=1;

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      add_header X-Request-ID $request_id;
      proxy_pass http://web;
    }
  }
}
